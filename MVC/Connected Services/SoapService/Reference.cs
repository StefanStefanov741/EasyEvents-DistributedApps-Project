//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC.SoapService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SoapService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WcfService.CompositeType GetDataUsingDataContract(WcfService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WcfService.CompositeType> GetDataUsingDataContractAsync(WcfService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByUsername", ReplyAction="http://tempuri.org/IService1/GetUserByUsernameResponse")]
        ApplicationService.DTOs.UserDTO GetUserByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByUsername", ReplyAction="http://tempuri.org/IService1/GetUserByUsernameResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> GetUserByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByEmail", ReplyAction="http://tempuri.org/IService1/GetUserByEmailResponse")]
        ApplicationService.DTOs.UserDTO GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByEmail", ReplyAction="http://tempuri.org/IService1/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByDisplayName", ReplyAction="http://tempuri.org/IService1/GetUserByDisplayNameResponse")]
        ApplicationService.DTOs.UserDTO GetUserByDisplayName(string Dname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByDisplayName", ReplyAction="http://tempuri.org/IService1/GetUserByDisplayNameResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> GetUserByDisplayNameAsync(string Dname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        ApplicationService.DTOs.UserDTO[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostUser", ReplyAction="http://tempuri.org/IService1/PostUserResponse")]
        string PostUser(ApplicationService.DTOs.UserDTO userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostUser", ReplyAction="http://tempuri.org/IService1/PostUserResponse")]
        System.Threading.Tasks.Task<string> PostUserAsync(ApplicationService.DTOs.UserDTO userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        string DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        System.Threading.Tasks.Task<string> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        string UpdateUser(ApplicationService.DTOs.UserDTO userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        System.Threading.Tasks.Task<string> UpdateUserAsync(ApplicationService.DTOs.UserDTO userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TryLogin", ReplyAction="http://tempuri.org/IService1/TryLoginResponse")]
        ApplicationService.DTOs.UserDTO TryLogin(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TryLogin", ReplyAction="http://tempuri.org/IService1/TryLoginResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> TryLoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllFriends", ReplyAction="http://tempuri.org/IService1/GetAllFriendsResponse")]
        ApplicationService.DTOs.FriendshipDTO[] GetAllFriends();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllFriends", ReplyAction="http://tempuri.org/IService1/GetAllFriendsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.FriendshipDTO[]> GetAllFriendsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostFriend", ReplyAction="http://tempuri.org/IService1/PostFriendResponse")]
        string PostFriend(ApplicationService.DTOs.FriendshipDTO friendDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostFriend", ReplyAction="http://tempuri.org/IService1/PostFriendResponse")]
        System.Threading.Tasks.Task<string> PostFriendAsync(ApplicationService.DTOs.FriendshipDTO friendDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFriend", ReplyAction="http://tempuri.org/IService1/UpdateFriendResponse")]
        string UpdateFriend(ApplicationService.DTOs.FriendshipDTO friendDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFriend", ReplyAction="http://tempuri.org/IService1/UpdateFriendResponse")]
        System.Threading.Tasks.Task<string> UpdateFriendAsync(ApplicationService.DTOs.FriendshipDTO friendDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFriend", ReplyAction="http://tempuri.org/IService1/DeleteFriendResponse")]
        string DeleteFriend(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFriend", ReplyAction="http://tempuri.org/IService1/DeleteFriendResponse")]
        System.Threading.Tasks.Task<string> DeleteFriendAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvents", ReplyAction="http://tempuri.org/IService1/GetAllEventsResponse")]
        ApplicationService.DTOs.EventDTO[] GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvents", ReplyAction="http://tempuri.org/IService1/GetAllEventsResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.EventDTO[]> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostEvent", ReplyAction="http://tempuri.org/IService1/PostEventResponse")]
        string PostEvent(ApplicationService.DTOs.EventDTO friendDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostEvent", ReplyAction="http://tempuri.org/IService1/PostEventResponse")]
        System.Threading.Tasks.Task<string> PostEventAsync(ApplicationService.DTOs.EventDTO friendDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEvent", ReplyAction="http://tempuri.org/IService1/UpdateEventResponse")]
        string UpdateEvent(ApplicationService.DTOs.EventDTO eventDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEvent", ReplyAction="http://tempuri.org/IService1/UpdateEventResponse")]
        System.Threading.Tasks.Task<string> UpdateEventAsync(ApplicationService.DTOs.EventDTO eventDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEvent", ReplyAction="http://tempuri.org/IService1/DeleteEventResponse")]
        string DeleteEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteEvent", ReplyAction="http://tempuri.org/IService1/DeleteEventResponse")]
        System.Threading.Tasks.Task<string> DeleteEventAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MVC.SoapService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MVC.SoapService.IService1>, MVC.SoapService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WcfService.CompositeType GetDataUsingDataContract(WcfService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WcfService.CompositeType> GetDataUsingDataContractAsync(WcfService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public ApplicationService.DTOs.UserDTO GetUserByUsername(string username) {
            return base.Channel.GetUserByUsername(username);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> GetUserByUsernameAsync(string username) {
            return base.Channel.GetUserByUsernameAsync(username);
        }
        
        public ApplicationService.DTOs.UserDTO GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public ApplicationService.DTOs.UserDTO GetUserByDisplayName(string Dname) {
            return base.Channel.GetUserByDisplayName(Dname);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> GetUserByDisplayNameAsync(string Dname) {
            return base.Channel.GetUserByDisplayNameAsync(Dname);
        }
        
        public ApplicationService.DTOs.UserDTO[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public string PostUser(ApplicationService.DTOs.UserDTO userDto) {
            return base.Channel.PostUser(userDto);
        }
        
        public System.Threading.Tasks.Task<string> PostUserAsync(ApplicationService.DTOs.UserDTO userDto) {
            return base.Channel.PostUserAsync(userDto);
        }
        
        public string DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public string UpdateUser(ApplicationService.DTOs.UserDTO userDto) {
            return base.Channel.UpdateUser(userDto);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUserAsync(ApplicationService.DTOs.UserDTO userDto) {
            return base.Channel.UpdateUserAsync(userDto);
        }
        
        public ApplicationService.DTOs.UserDTO TryLogin(string username, string password) {
            return base.Channel.TryLogin(username, password);
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.UserDTO> TryLoginAsync(string username, string password) {
            return base.Channel.TryLoginAsync(username, password);
        }
        
        public ApplicationService.DTOs.FriendshipDTO[] GetAllFriends() {
            return base.Channel.GetAllFriends();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.FriendshipDTO[]> GetAllFriendsAsync() {
            return base.Channel.GetAllFriendsAsync();
        }
        
        public string PostFriend(ApplicationService.DTOs.FriendshipDTO friendDto) {
            return base.Channel.PostFriend(friendDto);
        }
        
        public System.Threading.Tasks.Task<string> PostFriendAsync(ApplicationService.DTOs.FriendshipDTO friendDto) {
            return base.Channel.PostFriendAsync(friendDto);
        }
        
        public string UpdateFriend(ApplicationService.DTOs.FriendshipDTO friendDto) {
            return base.Channel.UpdateFriend(friendDto);
        }
        
        public System.Threading.Tasks.Task<string> UpdateFriendAsync(ApplicationService.DTOs.FriendshipDTO friendDto) {
            return base.Channel.UpdateFriendAsync(friendDto);
        }
        
        public string DeleteFriend(int id) {
            return base.Channel.DeleteFriend(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteFriendAsync(int id) {
            return base.Channel.DeleteFriendAsync(id);
        }
        
        public ApplicationService.DTOs.EventDTO[] GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.EventDTO[]> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
        
        public string PostEvent(ApplicationService.DTOs.EventDTO friendDto) {
            return base.Channel.PostEvent(friendDto);
        }
        
        public System.Threading.Tasks.Task<string> PostEventAsync(ApplicationService.DTOs.EventDTO friendDto) {
            return base.Channel.PostEventAsync(friendDto);
        }
        
        public string UpdateEvent(ApplicationService.DTOs.EventDTO eventDto) {
            return base.Channel.UpdateEvent(eventDto);
        }
        
        public System.Threading.Tasks.Task<string> UpdateEventAsync(ApplicationService.DTOs.EventDTO eventDto) {
            return base.Channel.UpdateEventAsync(eventDto);
        }
        
        public string DeleteEvent(int id) {
            return base.Channel.DeleteEvent(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteEventAsync(int id) {
            return base.Channel.DeleteEventAsync(id);
        }
    }
}
